{"ast":null,"code":"var _jsxFileName = \"/Users/gem/Documents/HErbAi/myapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [prediction, setPrediction] = useState(\"\");\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n  };\n  const handleSubmit = async () => {\n    const formData = new FormData();\n    formData.append(\"image\", selectedFile);\n    try {\n      const response = await fetch(\"http://localhost:8000/image\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json();\n      setPrediction(data[0]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Herb Identification \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \" Submit \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), \" \", prediction && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" Prediction: \", prediction, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 22\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZGnooCdU9ZVz18Ekb/uXYa1NfEg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","prediction","setPrediction","handleFileUpload","event","file","target","files","handleSubmit","formData","FormData","append","response","fetch","method","body","data","json","error","console","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/gem/Documents/HErbAi/myapp/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [prediction, setPrediction] = useState(\"\");\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n  };\n\n  const handleSubmit = async () => {\n    const formData = new FormData();\n    formData.append(\"image\", selectedFile);\n\n    try {\n      const response = await fetch(\"http://localhost:8000/image\", {\n        method: \"POST\",\n        body: formData,\n      });\n      const data = await response.json();\n      setPrediction(data[0]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        margin: \"20px\",\n      }}\n    >\n      <h1> Herb Identification </h1>{\" \"}\n      <input type=\"file\" accept=\"image/*\" onChange={handleFileUpload} />{\" \"}\n      <button onClick={handleSubmit}> Submit </button>{\" \"}\n      {prediction && <p> Prediction: {prediction} </p>}{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMS,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClCP,eAAe,CAACK,IAAI,CAAC;EACvB,CAAC;EAED,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEZ,YAAY,CAAC;IAEtC,IAAI;MACF,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QAC1DC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MACF,MAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCf,aAAa,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,oBACEtB,OAAA;IACEwB,KAAK,EAAE;MACLC,MAAM,EAAE;IACV,CAAE;IAAAC,QAAA,gBAEF1B,OAAA;MAAA0B,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAG,eAClC9B,OAAA;MAAO+B,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,SAAS;MAACC,QAAQ,EAAE1B;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAAC,GAAG,eACtE9B,OAAA;MAAQkC,OAAO,EAAEtB,YAAa;MAAAc,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAAC,GAAG,EACnDzB,UAAU,iBAAIL,OAAA;MAAA0B,QAAA,GAAG,eAAa,EAACrB,UAAU,EAAC,GAAC;IAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAAE,GAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV;AAAC5B,EAAA,CArCQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}